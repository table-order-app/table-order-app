import { chromium, Browser, Page } from 'playwright';

async function testTimezoneDisplay(): Promise<void> {
  const browser: Browser = await chromium.launch({ headless: false });
  const page: Page = await browser.newPage();

  try {
    console.log('üìù Starting timezone display test...');
    
    // ÁÆ°ÁêÜÁîªÈù¢„Å´„Ç¢„ÇØ„Çª„Çπ
    console.log('üîç Accessing admin login page...');
    await page.goto('http://35.72.96.45:3002');
    await page.waitForSelector('input[name="username"]', { timeout: 10000 });
    
    // „É≠„Ç∞„Ç§„É≥
    console.log('üîê Logging in...');
    await page.fill('input[name="username"]', 'admin');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    
    // „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    await page.waitForSelector('h1', { timeout: 15000 });
    console.log('‚úÖ Login successful');
    
    // ÁèæÂú®„ÅÆ„Ç∑„Çπ„ÉÜ„É†ÊôÇÂàª„ÇíË®òÈå≤
    const currentJST = new Date().toLocaleString('ja-JP', { 
      timeZone: 'Asia/Tokyo',
      year: 'numeric',
      month: '2-digit', 
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    console.log(`üïí Current JST: ${currentJST}`);
    
    // „É°„Éã„É•„ÉºÁÆ°ÁêÜÁîªÈù¢„Å´ÁßªÂãï
    console.log('üìã Navigating to menu management...');
    try {
      await page.click('text=„É°„Éã„É•„ÉºÁÆ°ÁêÜ');
      await page.waitForTimeout(3000);
    } catch {
      try {
        await page.click('a[href*="menu"]');
        await page.waitForTimeout(3000);
      } catch {
        console.log('‚ö†Ô∏è  Could not find menu management link, checking current page...');
      }
    }
    
    // ÁèæÂú®„ÅÆ„Éö„Éº„Ç∏ÊÉÖÂ†±
    const currentUrl = page.url();
    const title = await page.title();
    console.log(`üìç Current page: ${title} (${currentUrl})`);
    
    // „É°„Éã„É•„Éº„Ç¢„Ç§„ÉÜ„É†„ÅÆÊôÇÂàªË°®Á§∫„ÇíÁ¢∫Ë™ç
    console.log('‚è∞ Checking for timestamp displays...');
    
    // „Åï„Åæ„Åñ„Åæ„Å™ÊôÇÂàªË°®Á§∫„Éë„Çø„Éº„É≥„ÇíÊ§úÁ¥¢
    const timeSelectors = [
      'td:has-text("Âπ¥")',
      'td:has-text("Êúà")',
      'td:has-text("Êó•")',
      'td:has-text(":")',
      'td:has-text("/")',
      'span:has-text("Âπ¥")',
      'span:has-text("Êúà")',
      'span:has-text("Êó•")',
      'div:has-text("Âπ¥")',
      'div:has-text("Êúà")',
      'div:has-text("Êó•")',
      '[class*="date"]',
      '[class*="time"]',
      '[class*="created"]',
      '[class*="updated"]'
    ];
    
    const foundTimeDisplays: string[] = [];
    
    for (const selector of timeSelectors) {
      try {
        const elements = await page.locator(selector).all();
        for (const element of elements) {
          const text = await element.textContent();
          if (text && text.trim()) {
            // ÊôÇÂàª„Çâ„Åó„Åç„Éë„Çø„Éº„É≥„Çí„Çà„ÇäÂé≥ÂØÜ„Å´„ÉÅ„Çß„ÉÉ„ÇØ
            if (
              text.match(/\d{4}Âπ¥\d{1,2}Êúà\d{1,2}Êó•/) ||
              text.match(/\d{4}-\d{2}-\d{2}/) ||
              text.match(/\d{4}\/\d{1,2}\/\d{1,2}/) ||
              text.match(/\d{1,2}:\d{2}/) ||
              (text.includes('Âπ¥') && text.includes('Êúà') && text.includes('Êó•'))
            ) {
              const cleanText = text.trim().replace(/\s+/g, ' ');
              if (!foundTimeDisplays.includes(cleanText)) {
                foundTimeDisplays.push(cleanText);
              }
            }
          }
        }
      } catch (e) {
        // „Çª„É¨„ÇØ„Çø„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÁ∂öË°å
      }
    }
    
    if (foundTimeDisplays.length > 0) {
      console.log('üïí Found time displays:');
      foundTimeDisplays.forEach((time, index) => {
        console.log(`  ${index + 1}. "${time}"`);
      });
    } else {
      console.log('‚ö†Ô∏è  No time displays found with current selectors');
    }
    
    // ‰ºöË®àÁÆ°ÁêÜÁîªÈù¢„ÇÇÁ¢∫Ë™ç
    console.log('üí∞ Checking accounting page...');
    try {
      await page.click('text=‰ºöË®àÁÆ°ÁêÜ');
      await page.waitForTimeout(3000);
      
      console.log(`üìç Accounting page URL: ${page.url()}`);
      
      // ‰ºöË®à„Éö„Éº„Ç∏„Åß„ÅÆÊôÇÂàªË°®Á§∫Á¢∫Ë™ç
      const accountingTimes: string[] = [];
      
      for (const selector of timeSelectors) {
        try {
          const elements = await page.locator(selector).all();
          for (const element of elements) {
            const text = await element.textContent();
            if (text && text.trim()) {
              if (
                text.match(/\d{4}Âπ¥\d{1,2}Êúà\d{1,2}Êó•/) ||
                text.match(/\d{4}-\d{2}-\d{2}/) ||
                text.match(/\d{4}\/\d{1,2}\/\d{1,2}/) ||
                text.match(/\d{1,2}:\d{2}/)
              ) {
                const cleanText = text.trim().replace(/\s+/g, ' ');
                if (!accountingTimes.includes(cleanText)) {
                  accountingTimes.push(cleanText);
                }
              }
            }
          }
        } catch (e) {
          // „Çª„É¨„ÇØ„Çø„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØÁ∂öË°å
        }
      }
      
      if (accountingTimes.length > 0) {
        console.log('üìä Found accounting time displays:');
        accountingTimes.forEach((time, index) => {
          console.log(`  ${index + 1}. "${time}"`);
        });
      } else {
        console.log('‚ö†Ô∏è  No time displays found in accounting page');
      }
      
    } catch (error) {
      console.log('‚ö†Ô∏è  Could not access accounting page:', (error as Error).message);
    }
    
    // „Éñ„É©„Ç¶„Ç∂„Å®„Çµ„Éº„Éê„Éº„ÅÆÊôÇÂàªÊØîËºÉ
    console.log('üåç Timezone comparison:');
    const browserTime = await page.evaluate(() => {
      return new Date().toLocaleString('ja-JP', { 
        timeZone: 'Asia/Tokyo',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit', 
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    });
    
    console.log(`  Server JST: ${currentJST}`);
    console.log(`  Browser JST: ${browserTime}`);
    
    // „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„ÇíÊíÆÂΩ±
    await page.screenshot({ 
      path: '/Users/itouharuki/hukugyou/tableorder/dev/timezone-test-screenshot.png',
      fullPage: true 
    });
    console.log('üì∏ Screenshot saved as timezone-test-screenshot.png');
    
    // DOMÂÖ®‰Ωì„Åã„ÇâÊôÇÂàª„Çâ„Åó„Åç„ÉÜ„Ç≠„Çπ„Éà„ÇíÊäΩÂá∫
    console.log('üîç Searching entire DOM for time patterns...');
    const allTimeTexts = await page.evaluate(() => {
      const allText = document.body.innerText;
      const timePatterns = [
        /\d{4}Âπ¥\d{1,2}Êúà\d{1,2}Êó•/g,
        /\d{4}-\d{2}-\d{2}/g,
        /\d{4}\/\d{1,2}\/\d{1,2}/g,
        /\d{1,2}:\d{2}:\d{2}/g,
        /\d{1,2}:\d{2}/g
      ];
      
      const matches: string[] = [];
      timePatterns.forEach(pattern => {
        const found = allText.match(pattern);
        if (found) {
          matches.push(...found);
        }
      });
      
      return [...new Set(matches)]; // ÈáçË§áÈô§Âéª
    });
    
    if (allTimeTexts.length > 0) {
      console.log('üìÖ All time patterns found in DOM:');
      allTimeTexts.forEach((time, index) => {
        console.log(`  ${index + 1}. "${time}"`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', (error as Error).message);
    await page.screenshot({ 
      path: '/Users/itouharuki/hukugyou/tableorder/dev/timezone-test-error.png' 
    });
  } finally {
    await browser.close();
  }
}

testTimezoneDisplay().catch(console.error);